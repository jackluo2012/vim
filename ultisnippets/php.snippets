priority -50

## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

snippet fh "文件头"
<?php
/* ${1:文件描述}
 *
 * @author caixw<https://github.com/caixw>
 * @copyright ${2:caixw}
 * @package ${3:package}
 * @subpackage ${4:subpackage}
 */
endsnippet

snippet ? "<?php"
<?php
${0}
endsnippet

snippet ?= "<?=xx?>"
<?=${0};?>
endsnippet

snippet ?f "<?php foreach ...?>"
<?php foreach (${1:vars} as ${2:key}=>${3:val}):?>
	${0}
<?php endforeach;?>
endsnippet

snippet ?i "<?php if ...?>"
<?php if (${1:vars}):?>
	${0}
<?php endif;?>
endsnippet

snippet arr "array"
$${1:arrayName} = array('${2}' => ${3});${4}
endsnippet

snippet def "define"
define('${1}'${2});${3}
endsnippet

snippet do "do"
do {
	${2:// code... }
} while (${1:/* condition */});
endsnippet

snippet doci "doc_i"
interface ${1:someClass} {
	${4}
} // END interface $1"
endsnippet

snippet else "else"
else {
	${1:// code...}
}
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:// code...}
}
endsnippet

snippet foreachk "foreachk"
foreach ($${1:variable} as $${2:key} => $${3:value}){
	${4:// code...}
}
endsnippet

snippet get "get"
$_GET['${1}']${2}
endsnippet

snippet if "if"
if (${1:/* condition */}) {
	${2:// code...}
}
endsnippet

snippet elif "elseif"
elseif (${1:/* condition */}) {
	${2:// code...}
}
endsnippet

snippet inc "inc"
include '${1:file}';${2}
endsnippet

snippet log "log"
error_log(var_export(${1}, true));${2}
endsnippet

snippet P "post"
$_POST['${1}']${2}
endsnippet

snippet req1 "req1"
require_once '${1:file}';${2}
endsnippet

snippet S "session"
$_SESSION['${1}']${2}
endsnippet

snippet C "cookie"
$_COOKIE['${1}']${2}
endsnippet

snippet t "t"
$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
endsnippet

snippet var "var"
var_export(${1});${2}
endsnippet

snippet getter "PHP Class Getter" b
/*
 * Getter for $1
 */
public function get${1/\w+\s*/\u$0/}() {
	return $this->$1;$2
}
$4
endsnippet

snippet setter "PHP Class Setter" b
/*
 * Setter for $1
 */
public function set${1/\w+\s*/\u$0/}($$1) {
	$this->$1 = $$1;$3
	${4:return $this;}
}
$0
endsnippet

snippet gs "PHP Class Getter Setter" b
/*
 * Getter for $1
 */
public function get${1/\w+\s*/\u$0/}() {
	return $this->$1;$2
}

/*
 * Setter for $1
 */
public function set${1/\w+\s*/\u$0/}($$1) {
	$this->$1 = $$1;$3
	${4:return $this;}
}
$0
endsnippet

snippet pub "Public function" b
public function ${1:name}(${2:$param}) {
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pro "Protected function" b
/**
 * ${3:undocumented function}
 *
 * @return ${4:void}
 */
protected function ${1:name}(${2:$param}) {
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pri "Private function" b
private function ${1:name}(${2:$param}) {
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pubs "Public static function" b
public static function ${1:name}(${2:$param}) {
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pros "Protected static function" b
protected static function ${1:name}(${2:$param}) {
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pris "Private static function" b
private static function ${1:name}(${2:$param}) {
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet fun "Function snip" b
function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}
$0
endsnippet

snippet fore "Foreach loop"
foreach ($${1:variable} as $${3:value}) {
	${VISUAL}${4}
}
$0
endsnippet

snippet new "New class instance" b
$$1 = new $1($2);
$0
endsnippet

snippet ife "if else"
if (${1:/* condition */}) {
	${2:// code...}
} else {
	${3:// code...}
}
$0
endsnippet

snippet cls "Class declaration template" b
/**
 * $2
 */
$1class ${2:clsName} {
	public function ${4:__construct}(${5:$options}) {
		${6:// code}
	}
}
$0
endsnippet

snippet construct "__construct()" b
/**
 * @param $2mixed ${1/, /\n     * \@param mixed /g}
 */
public function __construct(${1:$dependencies}) {
${1/\$(\w+)(, )*/\n        $this->$1 = $$1;/g}
}
$0
endsnippet

snippet pc "Dumb debug helper in cli"
var_export($1);$0
endsnippet

# :vim:ft=snippets:
